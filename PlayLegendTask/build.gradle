plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'eu.rawora'
version = '1.0-RELEASE'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")

    // HikariCP für Connection Pooling
    implementation 'com.zaxxer:HikariCP:5.1.0'

    // MySQL JDBC Treiber
    implementation 'com.mysql:mysql-connector-j:8.4.0'

    implementation 'org.ow2.asm:asm:9.7'
    implementation 'org.ow2.asm:asm-commons:9.7'
    implementation 'org.ow2.asm:asm-tree:9.7'
    // ----------------------------------------------------
}

tasks {
    runServer {
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

// Ersetzt ${version} in plugin.yml mit der Projektversion
processResources {
    def props = [version: project.version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

// Konfiguration für das shadowJar Plugin
shadowJar {
    //  relocate 'com.zaxxer.hikari', 'eu.rawora.playLegendTask.libs.hikaricp'

    // Schließe Paper/Spigot API aus
    dependencies {
        exclude(dependency('io.papermc.paper:paper-api'))
    }

    // Entfernt den 'shadow'-Classifier
    archiveClassifier.set('')
}

build.dependsOn shadowJar
